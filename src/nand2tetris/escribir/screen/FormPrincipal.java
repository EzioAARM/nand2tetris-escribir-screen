/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nand2tetris.escribir.screen;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;

/**
 *
 * @author Axel
 */
public class FormPrincipal extends javax.swing.JFrame {

    private String header;
    private int ancho = 512;
    private int alto = 256;
    File _objArchivo = new File(System.getProperty("user.dir")); 
    
    /**
     * Creates new form FormPrincipal
     */
    public FormPrincipal() {
        initComponents();
        /*header = "load Screen.hdl,\n"
                + "output-file Screen.out,\n"
                + "output-list out%B1.16.1;\n\n"
                + "set in %B0111111111111111,\n"
                + "set load 1;\n\n";*/
        header = "@32767\n"
                + "D=A\n";
    }
    
    private String aBinario(int numero) {
        String binario = "";
        StringBuilder reversa = new StringBuilder();
        while (numero >= 2) {
            binario += (numero % 2);
            numero = numero / 2;
        }
        binario += numero;
        String comp = "";
        for (int i = 0; i < (13 - binario.length()); i++) {
            comp = "0" + comp;
        }
        reversa.append(binario);
        return comp + reversa.reverse();
    }
    
    public int obtenerLetra(BufferedReader lector, int posInicio) throws IOException {
        int anchoMaximo = 0;
        String linea = "";
        String caracter = "";
        int posActual = posInicio;
        int veces = 1;
        while ((linea = lector.readLine()).charAt(0) != '=') {
            if (anchoMaximo < linea.length()) {
                anchoMaximo = linea.length();
            }
            for (int i = 0; i < linea.length(); i++) {
                caracter = String.valueOf(linea.charAt(i));
                if (!caracter.equals(" ")) {
                    /*header += "set address %B" + aBinario(posActual) + ",\n"
                            + "tick,\n"
                            + "output,\n"
                            + "tock,\n"
                            + "output;\n\n";*/
                    header += "@" + posActual + "\n"
                            + "M=D\n";
                }
                posActual++;
            }
            posActual = posInicio + (32 * veces);
            veces++;
        }
        return anchoMaximo;
    }
    
    public int guardarLetra(String letra, int posInicio) throws Exception {
        try {
            int anchoMaximo = 0;
            File archivoParaLeer = new File(_objArchivo.getAbsolutePath() + "\\Letras\\" + letra.toUpperCase() + ".txt");
            FileReader leer = new FileReader(archivoParaLeer);
            BufferedReader lector = new BufferedReader(leer);
            String linea = "";
            boolean continuar = true;
            while ((linea = lector.readLine()) != null && continuar) {
                if (linea.charAt(0) == '='){
                    if (linea.charAt(1) == letra.charAt(0)) {
                        anchoMaximo = obtenerLetra(lector, posInicio);
                        continuar = false;
                    } else {
                        while ((linea = lector.readLine()).charAt(0) != '=') { }
                        if (linea.charAt(1) == letra.charAt(0)) {
                            anchoMaximo = obtenerLetra(lector, posInicio);
                            continuar = false;
                        } else {
                            throw new Exception("No se encuentra el archivo de configuraci칩n de la letra o simbolo: " + letra);
                        }
                    }
                }
            }
            return anchoMaximo + 1;
        } catch (Exception ex) {
            //throw new Exception("No se encuentra el archivo de configuraci칩n de la letra o simbolo: " + letra);
            throw new Exception(ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        textoMostrar = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        filaInicio = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        columnaInicio = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Texto que quiere mostrar");

        jLabel2.setText("Ingrese la fila en la que se mostrar치");

        filaInicio.setText("0");

        jLabel3.setText("Ingrese columna en la que se mostrar치");

        columnaInicio.setText("0");

        jButton1.setText("Generar prueba");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textoMostrar)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(25, 25, 25)
                        .addComponent(filaInicio, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(11, 11, 11)
                        .addComponent(columnaInicio)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textoMostrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(filaInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(columnaInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            int cInicio = Integer.parseInt(columnaInicio.getText());
            int fInicio = Integer.parseInt(filaInicio.getText());
            if (cInicio >= ancho || cInicio < 0) {
                throw new Exception("La columna de inicio no puede ser mayor a " + ancho);
            }
            if (fInicio >= alto || fInicio < 0) {
                throw new Exception("La fila de inicio no puede ser mayor a " + alto);
            }
            if (textoMostrar.getText().isEmpty()) {
                throw new Exception("Tiene que ingresar texto");
            }
            String cadena = textoMostrar.getText();
            int posInicial = 16384;
            if (fInicio == 0 && cInicio == 0) {
                posInicial = 16384;
            } else {
                for (int i = 0; i < cInicio; i++) {
                    posInicial += 1;
                }
                for (int i = 0; i < fInicio; i++) {
                    posInicial += 32;
                }
            }
            int referenciaAnterior = 0;
            String caracterActual = "";
            for (int i = 0; i < cadena.length(); i++) {
                caracterActual = String.valueOf(cadena.charAt(i));
                referenciaAnterior = 0;
                referenciaAnterior = guardarLetra(caracterActual, posInicial + referenciaAnterior);
                posInicial += referenciaAnterior;
            }
            String _directorio = _objArchivo.getAbsolutePath() + "\\outputs\\";
            File directorioSalida = new File(_directorio);
            if (!directorioSalida.isDirectory()) {
                directorioSalida.mkdirs();
            }
            String ubicacion = _objArchivo.getAbsolutePath() + "\\outputs\\ScreenOutput.asm";
            File archivoSalida = new File(ubicacion);
            BufferedWriter escritor;
            if (archivoSalida.exists()) {
                int i = 1;
                while (archivoSalida.exists()) {
                    ubicacion = _objArchivo.getAbsolutePath() + "\\outputs\\ScreenOutput (" + i + ").asm";
                    archivoSalida = new File(ubicacion);
                    i++;
                }
            }
            escritor = new BufferedWriter(new FileWriter(archivoSalida));
            escritor.write(header);
            escritor.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField columnaInicio;
    private javax.swing.JTextField filaInicio;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField textoMostrar;
    // End of variables declaration//GEN-END:variables
}
